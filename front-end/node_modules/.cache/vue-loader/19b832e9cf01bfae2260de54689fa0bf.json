{"remainingRequest":"C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\src\\views\\Admin.vue?vue&type=template&id=54c38a05&scoped=true&","dependencies":[{"path":"C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\src\\views\\Admin.vue","mtime":1649390893033},{"path":"C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648525680671},{"path":"C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1648525683200},{"path":"C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1648525680671},{"path":"C:\\Users\\rando\\cs260\\creative4\\happymoped\\front-end\\node_modules\\vue-loader\\lib\\index.js","mtime":1648525682512}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}